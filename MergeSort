import java.io.*;

class MergeSort {

	// junta dos arreglos: arr[l..m] y arr[m+1..r]
	public void merge(int arr[], int l, int m, int r)
	{
		// para encontar longitud de los arreglos
		int n1 = m - l + 1;
		int n2 = r - m;

		// Crea los subarreglos
		int izquierdo[] = new int[n1];
		int derecho[] = new int[n2];

		// copia los datos de los arreglos
		for (int i = 0; i < n1; ++i)
			izquierdo[i] = arr[l + i];
		for (int j = 0; j < n2; ++j)
			derecho[j] = arr[m + 1 + j];

		// Los junta
		int i = 0, j = 0;

		// Iprimer num del subarreglo creado
		int k = l;
		while (i < n1 && j < n2) {
			if (izquierdo[i] <= derecho[j]) {
				arr[k] = izquierdo[i];
				i++;
			}
			else {
				arr[k] = derecho[j];
				j++;
			}
			k++;
		}

		// se copian elementos del arreglo izquierdo
		while (i < n1) {
			arr[k] = izquierdo[i];
			i++;
			k++;
		}

		//se copian elementos del arreglo derecho
		while (j < n2) {
			arr[k] = derecho[j];
			j++;
			k++;
		}
	}

	// funcion que ordena todo
	void sort(int arr[], int l, int r)
	{
		if (l < r) {

			int puntoMedio = l + (r - l) / 2;

			//se ordenan mitades por separato
			sort(arr, l, puntoMedio);
			sort(arr, puntoMedio + 1, r);

			//se juntan mitades ordenadas
			merge(arr, l, puntoMedio, r);
		}
	}

	static void imprimirMergeSort(int arr[])
	{
		int n = arr.length;
		for (int i = 0; i < n; ++i)
			System.out.print(arr[i] + ", ");
	}

}
